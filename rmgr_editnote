#!/bin/sh

# Edit the note corresponding to a bibkey.

PrintUsage() {
    cat << EOF
Usage: $(basename $0) <key>

Edit the note corresponding to a bibkey. The key can be passed in as an
argument or piped in.
EOF
}

CreateArticleNote() {
    key="$1"
    bibjson="$2"
    extdata="$3"
    notefile="$4"
    title=$(echo "$bibjson" | jq -r '.title')
    authors=$(echo "$bibjson" |\
        # Extract the names and concatenate them with "+" in between
        jq -r '[.author[] | "- " + .given + " " + .family + "+"] | add' |\
        # Change the "+" to literal '\n's (instead of newlines)
        # This is to make sure that the later sed while creating files works
        sed 's/+/\\n/g' |\
        # Remove the last \\n
        rev | cut -c 3- | rev \
    )
    journal=$(echo "$bibjson" | jq -r '.["container-title"]')
    year=$(echo "$bibjson" | jq -r '.issued | .["date-parts"][0][0]')
    keywords=$(echo "$bibjson" |\
        jq -r '.keyword?' |\
        sed 's/,\s*/\\n- /g')
    [ "$keywords" = "null" ] &&\
        keywords="<++>" ||\
        keywords=$(sed -E "s/^\s*//" <<< "$keywords")
    tags=$(rmgr_getval -d '<++>' -n '\\n' "$key" tags)
    projects=$(rmgr_getval -d '<++>' -n '\\n' "$key" projects)
    readingFolder=$(rmgr_getval -d '' "$key" reading_folder)
    category=$(rmgr_getval -d '<++>' "$key" category)
    # Replace metadata fields in the template
    cat "$TEMPLATES/article" |\
        sed -E "s|^title:.*|title: \"$title\" [\@$key]|" |\
        sed -E "s/^author:.*/author: \n$authors/" |\
        sed -E "s/^journal:.*/journal: $journal/" |\
        sed -E "s/^year:.*/year: $year/" |\
        sed -E "s/^keywords:.*/keywords: $keywords/" |\
        sed -E "s/^tags:.*/tags: \n$tags/" |\
        sed -E "s/^projects:.*/projects: \n$projects/" |\
        sed -E "s/^reading_folder:.*/reading_folder: $reading_folder/" |\
        sed "s/category:.*/category: $category/" |\
        cat > "$notefile"
}

CreateBookNote() {
    echo "Not implemented"
    exit 200
}

CreateTechReportNote() {
    echo "Not implemented"
    exit 200
}

CreateThesisNote() {
    key="$1"
    bibjson="$2"
    extdata="$3"
    notefile="$4"
    title=$(echo "$bibjson" | jq -r '.title')
    authors=$(echo "$bibjson" |\
        # Extract the names and concatenate them with "+" in between
        jq -r '[.author[] | "- " + .given + " " + .family + "+"] | add' |\
        # Change the "+" to literal '\n's (instead of newlines)
        # This is to make sure that the later sed while creating files works
        sed 's/+/\\n/g' |\
        # Remove the last \\n
        rev | cut -c 3- | rev \
    )
    school=$(echo "$bibjson" | jq -r '.["publisher"]')
    year=$(echo "$bibjson" | jq -r '.issued | .["date-parts"][0][0]')
    keywords=$(echo "$bibjson" |\
        jq -r '.keyword?' |\
        sed 's/,\s*/\\n- /g')
    [ "$keywords" = "null" ] &&\
        keywords="<++>" ||\
        keywords=$(sed -E "s/^\s*//" <<< "$keywords")
    tags=$(rmgr_getval -d '<++>' -n '\\n' "$key" tags)
    projects=$(rmgr_getval -d '<++>' -n '\\n' "$key" projects)
    readingFolder=$(rmgr_getval -d '' "$key" reading_folder)
    category=$(rmgr_getval -d '<++>' "$key" category)
    # Replace metadata fields in the template
    cat "$TEMPLATES/phdthesis" |\
        sed -E "s/^title:.*/title: \"$title [\@$key]\"/" |\
        sed -E "s/^author:.*/author: \n$authors/" |\
        sed -E "s/^year:.*/year: $year/" |\
        sed -E "s/^school:.*/school: $school/" |\
        sed -E "s/^keywords:.*/keywords: $keywords/" |\
        sed -E "s/^tags:.*/tags: \n$tags/" |\
        sed -E "s/^projects:.*/projects: \n$projects/" |\
        sed -E "s/^reading_folder:.*/reading_folder: $reading_folder/" |\
        sed "s/category:.*/category: $category/" |\
        cat > "$notefile"
}


CreateNewNote() {
    key="$1"
    type="$2"
    notefile="$3"
    bib=$(rmgr_key2bib "$key")
    bibjson=$(echo "$bib" |\
        pandoc-citeproc --bib2json --format bibtex |\
        jq '.[0]')
    ext=$(rmgr_key2ext "$key")
    case "$type" in
        article) CreateArticleNote "$key" "$bibjson" "$ext" "$notefile" ;;
        inproceedings) CreateArticleNote "$key" "$bibjson" "$ext" "$notefile";;
        book) CreateBookNote "$key" "$bibjson" "$ext" "$notefile" ;;
        techreport) CreateTechReportNote "$key" "$bibjson" "$ext" "$notefile" ;;
        phdthesis) CreateThesisNote "$key" "$bibjson" "$ext" "$notefile" ;;
        *) echo "Unknown reference type $type." && exit 10 ;;
    esac
}

EditNote() {
    key="$1"
    type=$(rmgr_key2bib "$key" | bib2type)
    case "$type" in
        article) dir="$NOTES/articles" ;;
        inproceedings) dir="$NOTES/articles" ;;
        book) dir="$NOTES/books" ;;
        techreport) dir="$NOTES/techreports" ;;
        phdthesis) dir="$NOTES/theses" ;;
        *) echo "Unknown directory for $type." && exit 10 ;;
    esac
    [ ! -d "$dir" ] && mkdir -p "$dir"
    notefile=$(sed 's/-/_/g' <<< $key)
    notefile="$dir/$notefile"
    [ ! -z "$EXTENSION" ] && notefile="$notefile.$EXTENSION"
    [ ! -f "$notefile" ] && CreateNewNote "$key" "$type" "$notefile"
    $EDITOR "$notefile"
}

##### MAIN #####

source rmgr_setupenv

key="$1"
if [ -z "$key" ]; then
    [ ! -t 0 ] && key=$(</dev/stdin)
    [ -z "$key" ] && PrintUsage && exit 1
fi

searchResults=$(rmgr_lookupkey "$key")
case $? in
    0) EditNote "$searchResults" ;;
    1) echo "$key not found in $BIB" && exit 1 ;;
    2)
        echo "$key found multiple times:"
        rmgr_key2bib "$key"
        exit 2
        ;;
esac
