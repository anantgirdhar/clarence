#!/bin/sh

# Write a summary note

PrintUsage() {
  cat << EOF
Usage: $(basename $0) [note_name]

Write a summary note.

Summary notes can summarize a group of papers, a topic, or whatever else you
want to summarize.
EOF
}

##### MAIN #####

[ ! -d "$SUMMARIES" ] && mkdir "$SUMMARIES"

# Find the note to append to OR create a new note
# In addition to the matched string (if something ended up matching), fzf will
# also return the query string (--print-query). This means that if there is a
# match, fzf's output will be two lines - the query string and the matched
# line. However, if there is no match, fzf will just return the query string.
# The tail command ensures to grab the second line which allows to create a new
# file if there isn't a matched file.
FDC="ls $SUMMARIES | sed -E 's/\..*//'"
note=$(FZF_DEFAULT_COMMAND="$FDC" \
  fzf --prompt="Note name > " \
    --ansi -i \
    --query="$1" \
    --print-query \
    --header="$(printf "Ctrl+p: toggle preview\nCtrl+u/d: scroll preview")" \
    --border="rounded" \
    --bind "ctrl-p:toggle-preview" \
    --bind "ctrl-u:preview-up" \
    --bind "ctrl-d:preview-down" \
    --preview="_previewSummaryFile '$SUMMARIES/{}.md'" \
    --preview-window=wrap \
  | tail -n 1 \
)

[ -z "$note" ] && exit 1

# Force the correct extension on to the file
extension=$(echo "${note##*.}" | tr '[:upper:]' '[:lower:]')
[ "$extension" = "md" ] || note="$(basename "$note").md"

fullPath="$SUMMARIES/$note"
[ ! -f "$fullPath" ] && template="$CONFDIR/summary_template.md" || template=""

# Copy the template and open the note (with some enhancements based on the editor)
case "$EDITOR" in
  "vim")
    # Open a new buffer and read in the template within vim instead of copying
    # it over. This means taht there isn't an empty file sitting around if the
    # user doesn't choose to write it.
    [ -f "$template" ] && \
      $EDITOR -c "read "$template" | cd %:p:h" "$fullPath" || \
      $EDITOR -c "cd %:p:h" "$fullPath"
    ;;
  *)
    # Just copy the template file over before opening
    [ -f "$template" ] && cp "$template" "$fullPath"
    $EDITOR "$fullPath"
    ;;
esac
