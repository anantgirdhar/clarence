#!/bin/sh

# Read a summary notes file as PDF

PrintUsage() {
  cat << EOF
Usage: $(basename $0) [note_name]

Read a summary note as a PDF.

The note_name can be piped in or provided as an argument (takes precedence).

Error codes:
- 0: success
- 1: directory not found
- 2: file does not exist
EOF
}

##### MAIN #####

[ ! -d "$SUMMARIES" ] && echo "Summaries directory not found" && exit 1

note="$1"
if [ -z "$note" ]; then
  [ ! -t 0 ] && note=$(cat /dev/stdin)
  if [ -z "$note" ]; then
    # Find the note to append to OR create a new note
    # In addition to the matched string (if something ended up matching), fzf will
    # also return the query string (--print-query). This means that if there is a
    # match, fzf's output will be two lines - the query string and the matched
    # line. However, if there is no match, fzf will just return the query string.
    # The tail command ensures to grab the second line which allows to create a new
    # file if there isn't a matched file.
    FDC="ls $SUMMARIES | sed -E 's/\..*//'"
    note=$(FZF_DEFAULT_COMMAND="$FDC" \
      fzf --prompt="Note name > " \
        --ansi -i \
        --query="$1" \
        --print-query \
        --header="$(printf "Ctrl+p: toggle preview\nCtrl+u/d: scroll preview")" \
        --border="rounded" \
        --bind "ctrl-p:toggle-preview" \
        --bind "ctrl-u:preview-up" \
        --bind "ctrl-d:preview-down" \
        --preview="_previewSummaryFile '$SUMMARIES/{}.md'" \
        --preview-window=wrap \
      | tail -n 1 \
    )
  fi
[ -z "$note" ] && PrintUsage && exit 1
fi




# Force the correct extension on to the file
extension=$(echo "${note##*.}" | tr '[:upper:]' '[:lower:]')
[ "$extension" = "md" ] || note="$(basename "$note").md"

# Verify that file exists
fullPath="$SUMMARIES/$note"
[ ! -f "$fullPath" ] && echo "File ($filepath) does not exist." && exit 2

pandoc "$fullPath" -t pdf | $READER -
