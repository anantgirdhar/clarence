#!/bin/sh

# Create an entry manually and add it to the database

PrintUsage() {
  cat << EOF
Usage: $(basename $0)

Create an entry manually and ask the user for the various fields.
EOF
}

GetDefaultsScript() {
  validTypes=$(_GetTypesList)

  # Redirect stdin and stdout to use the tty
  exec 9<>/dev/stdout
  exec 1>/dev/tty

  echo "The following types are supported:"
  echo "$validTypes"
  entryType=
  while ! echo "$validTypes" | grep "^$entryType$" >/dev/null 2>/dev/null; do
    exec 8<&0
    exec 0</dev/tty
    read -p "Enter a valid type name: " entryType
    exec 0<&8
  done
  capitalizedEntryType=$(echo "$entryType" | sed 's/./\U&/')
  CatDefaultsScript="_CatDefaultsFor$capitalizedEntryType"
  # [ ! -f "$CatDefaultsScript" ] && \
  #   echo "I wasn't taught how to add an entry for a '$entryType' type..." && \
  #   exit 4

  # Reset file descriptors
  exec 0>&8
  exec 1<&9

  echo "$CatDefaultsScript"
}

PreventKeyCollisions() {
  key="$1"
  yaml="$2"
  matchedKeys=$($APP searchkey "$key")
  exitCode="$?"
  matchedKeys=$(echo "$matchedKeys" | uniq | sort)
  case "$exitCode" in
    1)
      # An argument was missing. But we did specify a key (otherwise this
      # script should have stopped before this point).
      echo "Spooky error." && exit 42 ;;
    2)
      # Key not found. Can safely add this record.
      echo "$key" && exit 0 ;;
    *)
      # Match(es) found. Time to get some user input.
      # echo "Dev this." && exit 100
      exec 9<>/dev/stdout
      exec 1>/dev/tty
      echo "Key collision. Do any of the following records match?"
      while IFS=" " read -r matchedKey; do
        $APP key2record "$matchedKey" | $HIGHLIGHT_YAML
        exec 8<&0
        exec 0</dev/tty
        read -p "Does this match whatever you're trying to add? [y|N] " response
        exec 0<&8
        [ -z "$response" ] && response="n"
        [ "$response" = "y" ] && exit 3
      done <<< "$matchedKeys"
      # If we get here, the user intends to add this new record to the
      # database. Create a new key (by appending an extra character).
      # Just make sure to reset stdout so that the output can be picked up by
      # the script.
      exec 1<&9
      genkey -u -y "$yaml" && exit 0
      ;;
  esac
}

GenerateKey() {
  yaml="$1"
  key=$(genkey -y "$yaml")
  [ -z "$key" ] && echo "Unable to generate key." && exit 2
  # Check if entry already exists (by checking for the key in the database)
  key=$(PreventKeyCollisions "$key" "$yaml")
  exitStatus="$?"
  if [ "$exitStatus" != "0" ]; then
    # Something went wrong and $key should have the error message
    echo "$key"
    exit "$exitStatus"
  else
    echo "$key"
  fi
}

##### MAIN #####

# Attach to tty to be able to print to the terminal without affecting stdout.
exec 9<>/dev/stdout
exec 1<>/dev/tty

# Create a new temporary buffer
tmpbuf=$(mktemp --tmpdir=/tmp/ "$APP"_entry_XXXXXX.yaml)

confirmation="r"
while true; do
  case "$confirmation" in
    "y") break ;;
    "q") exit 3 ;;
    "e") $EDITOR "$tmpbuf" ;;
    "r")
      # Set a default value for the key
      # This is set to be a comment string so that it can be easily stripped
      key=" # KEY WILL BE AUTO GENERATED"
      CatDefaultsScript=$(GetDefaultsScript)
      if [ "$?" != 0 ]; then
        exit "$?"
      fi
      $CatDefaultsScript "$tmpbuf" "$key" "a" 2>/dev/null
      confirmation="e"
      continue
      ;;
  esac
  record=$(sed -E 's/#.*//g' "$tmpbuf" | sed '/^$/ d')
  key=$(GenerateKey "$record")
  exitStatus="$?"
  if [ "$exitStatus" != 0 ]; then
    # Something went wrong and $key should have the error message
    echo "$key"
    exit "$exitStatus"
  fi
  record=$(echo "$record" | sed -E "s/^-/- $key:/")
  echo
  echo "$record" | $HIGHLIGHT_YAML
  read -p 'Does this look correct? [y|q|e|r]: ' confirmation
done

echo >> "$DB"
echo "$record" >> "$DB"

# Reattach to stdout
exec 1<&9

# Leave the key on stdout
echo "$record" | getyamlval "key"
