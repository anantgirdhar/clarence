#!/bin/sh

# Update a specific dict list for a key

PrintUsage() {
    cat 1>&2 << EOF
Usage: $(basename $0) <bibkey> <datakey>

Update a specific datakey list for a specific bibkey.
EOF
}

PromptForVals() {
    datakey="$1"
    echo "Enter ${datakey} (one per line). Blank line to end." >&2
    list=""
    read -p "${datakey%%s} > " val >&2
    while [ ! -z "$val" ]; do
        [ -z "$list" ] && list="$val" ||\
        list=$(cat << EOF
$list
$val
EOF
)
        read -p "${datakey%%s} > " val >&2
    done
    echo "$list"
}

##### MAIN #####

source rmgr_setupenv

key="$1"
[ -z "$key" ] && PrintUsage && exit 1
datakey="$2"
[ -z "$datakey" ] && PrintUsage && exit 1

# Verify that the record exists
searchResults=$(rmgr_searchkey "$key")
[ -z "$searchResults" ] && echo "Key doesn't exist." && exit 2

# Print the current datakey values
echo "Current $datakey:"
sed -n "/^- $key:/,/^- / p" "$EXT" | sed -n "/^  - $datakey:/,/  - / p" | tail -n +2 | head -n -1
echo

# Get the tags
tags=$(PromptForVals "$datakey")

# Create a temp file for atomic editing
tmpfile="/tmp/rmgr_updlist.tmp"

# Write everything before the current key
sed -n "0,/^- $key:/ p" "$EXT" | head -n -1 > $tmpfile
# Write everything until the current key's datakey
sed -n "/^- $key:/,/^  - $datakey:/ p" "$EXT" >> $tmpfile
[ ! -z "$tags" ] && echo "$tags" | while read tag; do
    echo "    - $tag" >> $tmpfile
done
# Write the rest of the current record
sed -n "/^- $key/,/^- / p" "$EXT" | sed "/^- $key/,/^  - $datakey:/ d" | sed -nE "/^\s{0,2}- /,$ p" >> $tmpfile
# Get the key after the current key
nextKey=$(sed -n "/^- $key:/,/^- / p" "$EXT" | tail -n 1 | grep '^- ')
[ ! -z "$nextKey" ] && sed -n "/^- $nextKey/,$ p" "$EXT" | tail -n +2 >> $tmpfile

# Overwrite the db with the tmpfile
mv "$tmpfile" "$EXT"
